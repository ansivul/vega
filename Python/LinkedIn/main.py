# main.py
import streamlit as st
from parser import fetch_articles, load_config
from generator import generate_post_variants, generate_image_prompt, check_api_status
import os
import re
import yaml
import feedparser
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()

st.title("AI LinkedIn Post Generator")

# üìÖ –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
st.sidebar.markdown("### üìÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ")
default_date = datetime.now() - timedelta(days=7)
since_date = st.sidebar.date_input("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—å–∏ —Å:", value=default_date.date())

# üîò –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
preset = st.sidebar.radio("–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:", ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"], index=1)
if preset == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è":
    since_date = datetime.now().date() - timedelta(days=3)
elif preset == "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü":
    since_date = datetime.now().date() - timedelta(days=30)

# ‚úÖ –ú–∏–Ω–∏–º—É–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
min_matches = st.sidebar.slider("–ú–∏–Ω–∏–º—É–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:", min_value=1, max_value=5, value=1)

# üî¢ –õ–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∞—Ç–µ–π
article_limit = st.sidebar.slider("–ú–∞–∫—Å–∏–º—É–º —Å—Ç–∞—Ç–µ–π:", min_value=10, max_value=250, value=25, step=5)

# ‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–ø—Ü–∏–∏
st.sidebar.markdown("---")
show_debug = st.sidebar.checkbox("üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏ (—Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏)")
use_soft_filter = st.sidebar.checkbox("üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º—è–≥–∫–∏–π —Ñ–∏–ª—å—Ç—Ä (–ø–æ–¥—Å—Ç—Ä–æ–∫–∏)")

articles, debug_log = fetch_articles(debug=show_debug, soft_filter=use_soft_filter, since_date=since_date, min_matches=min_matches, limit=article_limit)

if 'selected_articles' not in st.session_state:
    st.session_state.selected_articles = []

# –í–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4, tab5 = st.tabs(["üì∞ –û–±–∑–æ—Ä —Å—Ç–∞—Ç–µ–π", "‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤", "üìã –õ–æ–≥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", "üß© –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "üîó RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∏"])

with tab1:
    if not articles:
        st.warning("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–∞—Ç–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
    else:
        st.markdown("## üìö –°—Ç–∞—Ç—å–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞:")
        for idx, article in enumerate(articles):
            with st.expander(article['title']):
                st.markdown(f"[–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é]({article['link']})")

                clean_summary = re.sub(r'<.*?>', '', article['summary'])
                st.caption(clean_summary[:300] + "...")

                if 'reason' in article:
                    st.caption(f"üß© –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–∞–º: {article['reason']}")

                if st.checkbox("‚úÖ –í—ã–±—Ä–∞—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞", key=f"select_{idx}"):
                    if idx not in st.session_state.selected_articles:
                        st.session_state.selected_articles.append(idx)
                else:
                    if idx in st.session_state.selected_articles:
                        st.session_state.selected_articles.remove(idx)

with tab2:
    if st.session_state.selected_articles:
        st.markdown("### ‚öôÔ∏è –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ GPT")
        use_mock = st.checkbox("üß™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º (–º–æ–∫-—Ç–µ—Å—Ç)", value=False)

        if not use_mock:
            st.info("üí≥ GPT —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ ‚Äî –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫—Ä–µ–¥–∏—Ç—ã OpenAI API.")

        if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—å—è–º"):
            if not use_mock:
                api_status = check_api_status()
                if not api_status["ok"]:
                    st.error(f"‚ùå OpenAI GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {api_status['message']}")
                    st.stop()

            st.markdown("## ‚úçÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã")
            for idx in st.session_state.selected_articles:
                article = articles[idx]
                st.subheader(article['title'])
                st.markdown(f"[–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é]({article['link']})")

                posts = generate_post_variants(article['title'], article['summary'], use_mock=use_mock)
                styles = [
                    "üìå –§–∞–∫—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π",
                    "üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
                    "üìñ –ò—Å—Ç–æ—Ä–∏—è / –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π",
                    "üß† –ú–Ω–µ–Ω–∏–µ / —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π",
                    "üí¨ –ü—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å",
                    "ü™Ñ –ö–æ—Ä–æ—Ç–∫–æ –∏ —Ü–µ–ø–∫–æ"
                ]

                for i, post in enumerate(posts):
                    style = styles[i] if i < len(styles) else f"üí° –í–∞—Ä–∏–∞–Ω—Ç {i+1}"
                    st.markdown(f"### {style} –ø–æ—Å—Ç", unsafe_allow_html=True)
                    st.markdown(post.strip(), unsafe_allow_html=True)
                    st.markdown("---")


                image_prompt = generate_image_prompt(article['summary'], use_mock=use_mock)
                st.text_input(
                    label=f"–ü—Ä–æ–º–ø—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∏ (—Å—Ç–∞—Ç—å—è {idx+1})",
                    value=image_prompt,
                    key=f"gen_image_prompt_{idx}"
                )
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–û–±–∑–æ—Ä —Å—Ç–∞—Ç–µ–π', —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")

with tab3:
    if show_debug and debug_log:
        st.markdown("### ü™µ –õ–æ–≥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
        for line in debug_log:
            st.text(line)
    else:
        st.info("–õ–æ–≥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏.")

with tab4:
    st.markdown("### üß© –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π")
    config_path = "config.yaml"
    config = load_config()
    keywords = config.get("keywords", [])

    st.markdown("#### ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:")
    for word in keywords:
        col1, col2 = st.columns([0.8, 0.2])
        with col1:
            st.markdown(f"- {word}")
        with col2:
            if st.button("‚ùå", key=f"del_kw_{word}"):
                keywords.remove(word)
                config["keywords"] = keywords
                with open(config_path, "w", encoding="utf-8") as f:
                    yaml.safe_dump(config, f, allow_unicode=True)
                st.success(f"–£–¥–∞–ª–µ–Ω–æ: {word}")
                st.rerun()

    st.markdown("---")
    new_keyword = st.text_input("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")
    if st.button("–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á") and new_keyword:
        if new_keyword not in keywords:
            keywords.append(new_keyword)
            config["keywords"] = keywords
            with open(config_path, "w", encoding="utf-8") as f:
                yaml.safe_dump(config, f, allow_unicode=True)
            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {new_keyword}")
            st.rerun()
        else:
            st.warning("–¢–∞–∫–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å.")

with tab5:
    st.markdown("### üîó RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∏")
    config_path = "config.yaml"
    config = load_config()
    rss_feeds = config.get("rss", [])

    st.markdown("#### üì° –ê–∫—Ç–∏–≤–Ω—ã–µ RSS-—Å—Å—ã–ª–∫–∏:")
    for url in rss_feeds:
        col1, col2 = st.columns([0.85, 0.15])
        with col1:
            st.markdown(f"- {url}")
        with col2:
            if st.button("‚ùå", key=f"del_rss_{url}"):
                rss_feeds.remove(url)
                config["rss"] = rss_feeds
                with open(config_path, "w", encoding="utf-8") as f:
                    yaml.safe_dump(config, f, allow_unicode=True)
                st.success(f"–£–¥–∞–ª–µ–Ω–æ: {url}")
                st.rerun()

    st.markdown("---")
    new_rss = st.text_input("‚ûï –î–æ–±–∞–≤–∏—Ç—å RSS-—Å—Å—ã–ª–∫—É")
    if st.button("–î–æ–±–∞–≤–∏—Ç—å RSS") and new_rss:
        if new_rss not in rss_feeds:
            test_feed = feedparser.parse(new_rss)
            if test_feed.bozo:
                st.error("‚ùå –û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è RSS.")
            else:
                rss_feeds.append(new_rss)
                config["rss"] = rss_feeds
                with open(config_path, "w", encoding="utf-8") as f:
                    yaml.safe_dump(config, f, allow_unicode=True)
                st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {new_rss}")
                st.rerun()
        else:
            st.warning("–¢–∞–∫–æ–π RSS —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
